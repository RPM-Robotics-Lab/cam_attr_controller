#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <iostream>
#include<fstream>
#include <stdio.h>
#include <time.h>
#include <numeric>
#include <cmath>
#include <algorithm>
#include <vector>
#include "irp_imgeval++/img_eval.h"

using namespace std;
using namespace cv;



int main(int argc, char** argv)
{
    cv::Mat img; 
    Img_eval eval;

    // CRF from txt file 
    double et[128] = {0.000000, 0.013834, 0.027593, 0.041277, 0.054885, 0.068419, 0.081876, 0.095259, 0.108570, 0.121800, 0.134950, 0.148030, 0.161040, 0.173970, 0.186820, 0.199600, 0.212300, 0.224930, 0.237480, 0.249960, 0.262370, 0.274700, 0.286960, 0.299150, 0.311270, 0.323310, 0.335290, 0.347190, 0.359020, 0.370790, 0.382480, 0.394110, 0.405660, 0.417150, 0.428580, 0.439930, 0.451230, 0.462460, 0.473620, 0.484720, 0.495770, 0.506750, 0.517670, 0.528540, 0.539350, 0.550100, 0.560800, 0.571450, 0.582050, 0.592590, 0.603090, 0.613540, 0.623940, 0.634290, 0.644590, 0.654840, 0.665050, 0.675210, 0.685330, 0.695400, 0.705430, 0.715420, 0.725370, 0.735270, 0.745140, 0.754970, 0.764760, 0.774520, 0.784250, 0.793940, 0.803610, 0.813250, 0.822860, 0.832450, 0.842010, 0.851560, 0.861090, 0.870600, 0.880090, 0.889560, 0.899010, 0.908450, 0.917870, 0.927280, 0.936660, 0.946040, 0.955390, 0.964740, 0.974070, 0.983390, 0.992690, 1.002000, 1.011300, 1.020600, 1.029800, 1.039100, 1.048400, 1.057700, 1.066900, 1.076200, 1.085500, 1.094800, 1.104000, 1.113300, 1.122600, 1.131900, 1.141100, 1.150400, 1.159700, 1.168900, 1.178200, 1.187500, 1.196700, 1.206000, 1.215300, 1.224600, 1.233800, 1.243100, 1.252400, 1.261600, 1.270900, 1.280200, 1.289500, 1.298700, 1.308000, 1.317300, 1.326500, 1.863600}; 

    double gain[128] = {0.000000, 0.023231, 0.046321, 0.069273, 0.092087, 0.114760, 0.137310,   0.159710, 0.181980, 0.204120, 0.226130, 0.248000, 0.269740, 0.291350, 0.312840, 0.334190, 0.355420, 0.376510, 0.397490, 0.418330, 0.439050, 0.459650, 0.480130, 0.500480, 0.520710, 0.540830, 0.560820, 0.580700, 0.600460, 0.620110, 0.639640, 0.659060, 0.678370, 0.697560, 0.716640, 0.735610, 0.754480, 0.773240, 0.791890, 0.810430, 0.828880, 0.847220, 0.865460, 0.883610, 0.901660, 0.919610, 0.937480, 0.955260, 0.972950, 0.990550, 1.008100, 1.025500, 1.042900, 1.060100, 1.077300, 1.094400, 1.111500, 1.128400, 1.145300, 1.162200, 1.179000, 1.195700, 1.212300, 1.228900, 1.245500, 1.261900, 1.278400, 1.294800, 1.311200, 1.327600, 1.343900, 1.360100, 1.376400, 1.392600, 1.408900, 1.425000, 1.441200, 1.457400, 1.473500, 1.489700, 1.505900, 1.522000, 1.538200, 1.554300, 1.570400, 1.586600, 1.602700, 1.618800, 1.635000, 1.651100, 1.667200, 1.683400, 1.699500, 1.715600, 1.731700, 1.747800, 1.763900, 1.780000, 1.796100, 1.812200, 1.828300, 1.844400, 1.860500, 1.876600, 1.892700, 1.908700, 1.924800, 1.940900, 1.957000, 1.973000, 1.989100, 2.005100, 2.021200, 2.037300, 2.053300, 2.069400, 2.085400, 2.101400, 2.117500, 2.133500, 2.149600, 2.165600, 2.181700, 2.197700, 2.213800, 2.229800, 2.245900, 5.068200};







//    cout << "rrrrrrr "<<  << endl;


    // Load image
    // src = cv::imread(argv[1], 1);
    img = cv::imread ("../../data/86_1.png", 1);
	Mat resized;
	cv::resize (img, img, cv::Size(320, 240));
    if (!img.data) {
        std::cout << "Usage: EntropyFilter <path_to_image>" << std::endl;
        return -1;
    }

    double ewg = eval.calc_img_ent_grad (img, true);
    int exptime = 1000  ; 
    for (int i = 3 * ((exptime /500) -2) + 1; i<127; i+=3)   {
//    cout << et[i] << endl ;
    int irr = log(7000.0/ (double)exptime) + 2.0; 
    cout << "seq" << i << endl;
    Mat etimg = img * irr * exp(et[i]); 
        cv::imshow("etimg", etimg);
        cv::waitKey(00);

    cvtColor(etimg, etimg, cv::COLOR_GRAY2BGR);
    double etewg = eval.calc_img_ent_grad (etimg, true);
    std::cout << "Computed entropy et ewg = " << etewg << "irr" << irr << std::endl;        
    }

    double snr = eval.getPSNR (img, img); 
    Mat noise_img = img; 
    snr = eval.getPSNR (img, noise_img); 
    cv::imshow("Noisy", noise_img);
    std::cout << "psnr=  " << snr  <<std::endl;



    for (int j = 0; j<127; j+=10)   {
//    cout << pow(10, gain[j]/5) << endl ;
    Mat gainimg = img * pow(10, gain[j]/5); 
        cv::imshow("gainimg", gainimg);
        cv::waitKey(100);
    }

    char str[30];
    snprintf (str, sizeof str, "%d", 100);

    cv::namedWindow("best", cv::WINDOW_AUTOSIZE);

    cv::Mat result;
    cv::cvtColor(img, result, cv::COLOR_GRAY2BGR);
    cv::putText(result, str, Point(100,50), CV_FONT_HERSHEY_SIMPLEX, 1, CV_RGB(255,0,0), 2, 8);
    cv::imshow("best", result);

    cv::waitKey(0);

    std::cout << "Computed entropy weighted gain = " << ewg << std::endl;

    return 0;
}


